apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.guideme.guideme"
        multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "CLIENT_ID", "\"${loadSecret("UBER_CLIENT_ID")}\""
        //Add your client id to gradle.properties
        buildConfigField "String", "REDIRECT_URI", "\"${loadSecret("UBER_REDIRECT_URI")}\""
        //Add your redirect uri to gradle.properties
        buildConfigField "String", "SERVER_TOKEN", "\"${loadSecret("UBER_SERVER_TOKEN")}\""
        //Add your server token to gradle.properties
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.0.2'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android:flexbox:1.1.0'

    implementation 'com.google.firebase:firebase-core:17.0.1'
    implementation 'com.google.firebase:firebase-auth:18.1.0'
    implementation 'com.google.firebase:firebase-firestore:20.2.0'
    implementation 'com.google.firebase:firebase-database:18.0.1'

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.0.0'
    implementation('com.github.rtchagas:pingplacepicker:1.1.1') {
        exclude group: 'com.google.android.material'
    }

    implementation 'com.instabug.library:instabug:8.5.0'

    implementation 'com.brouding:android-simple-dialog:0.3.1'
    implementation 'io.paperdb:paperdb:2.6'
    implementation 'moe.feng:MaterialStepperView:0.2.4.2'

    implementation 'com.firebase:geofire-android:2.1.1'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    implementation 'com.github.bosphere.android-fadingedgelayout:fadingedgelayout:1.0.0'
    implementation 'com.github.KwabenBerko:OpenWeatherMap-Android-Library:2.0.2'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Uber
    implementation "com.uber.sdk:rides-android:0.5.3"

    implementation 'com.akexorcist:googledirectionlibrary:1.1.1'
}

apply plugin: 'com.google.gms.google-services'

/**
 * Loads property from gradle.properties and ~/.gradle/gradle.properties
 * Use to look up confidential information like keys that shoudln't be stored publicly
 * @param name to lookup
 * @return the value of the property or "MISSING"
 */
def loadSecret(String name) {
    return hasProperty(name) ? getProperty(name) : "MISSING"
}
